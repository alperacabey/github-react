{"version":3,"sources":["services/github.js","store/organizationSlice.js","store/index.js","components/common/textField.js","components/common/range.js","components/common/autoComplete.js","components/common/table.js","components/common/dropDown.js","components/common/plot.js","components/layout/header.js","components/repository/list.js","components/repository/plots.js","components/layout/container.js","containers/App.js","index.js"],"names":["RequestError","require","octokit","Octokit","auth","process","githubAPI","searchOrganizations","input","request","q","per_page","page","searchRepositories","org","name","min","max","sort","order","stars","getIssues","repo","state","createAsyncThunk","a","github","response","data","searchRepositoriesAsync","params","repositories","promiseList","forEach","push","full_name","Promise","all","map","repository","index","open_issues","total_count","closed_issues","organizationSlice","createSlice","initialState","list","selected","serviceStatus","loadingStack","totalCount","reducers","resetOrganization","selectOrganization","action","payload","extraReducers","builder","addCase","pending","fulfilled","items","item","id","login","rejected","actions","receiveOrganizations","selectedOrganization","store","organization","organizationList","repositoryList","configureStore","reducer","organizationReducer","TextField","value","label","placeholder","showTooltip","loading","onChange","onKeyPress","onClick","className","autoComplete","e","target","type","onKeyDown","place","effect","backgroundColor","arrowColor","style","right","Range","useState","setShowTooltip","handleOnChange","Number","useEffect","ReactTooltip","rebuild","defaultValue","AutoComplete","onSelect","isComponentVisible","setIsComponentVisible","cursor","setCursor","selectItem","val","charCode","keyCode","length","code","i","Table","columns","handlePageClick","pageCount","sorting","Object","keys","key","scope","x","y","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","DropDown","options","isOpen","setIsOpen","Plot","plotType","ResponsiveContainer","width","height","ScatterChart","margin","top","bottom","left","CartesianGrid","XAxis","dataKey","position","offset","YAxis","angle","ZAxis","Tooltip","strokeDasharray","Scatter","fill","Cell","color","timeout","Header","dispatch","useDispatch","searchText","setSeacrhText","organizations","useSelector","clearTimeout","setTimeout","iconColor","onSelectItem","open_issues_count","stargazers_count","List","count","setName","range","setRange","setPage","setPageCount","setSort","setOrder","getState","Math","ceil","totalRecords","plotOptions","Plots","setPlotType","plotList","setPlotList","setLoading","plots","percentage","toString","fetchIssues","Container","App","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.309d6a26.chunk.js","sourcesContent":["import { Octokit } from \"@octokit/rest\"\nconst { RequestError } = require(\"@octokit/request-error\")\n\nconst octokit = new Octokit({\n    auth: process.env.REACT_APP_ACCESS_TOKEN\n})\n\nconst githubAPI = {\n    async searchOrganizations(input) {\n        try {\n            return input && octokit.request('GET /search/users', {\n                q: `type:org ${input}`,\n                per_page: 10,\n                page: 1,\n            })\n        } catch (e) {\n            new RequestError(e)\n        }\n    },\n\n    // order = \"asc\" || \"desc\"\n    // sort = 'stars' || 'forks' || 'help-wanted-issues'\n    async searchRepositories({\n        org = \"\",\n        name = \"\",\n        min = 0,\n        max = 0,\n        page = 1,\n        sort = 'name',\n        order = 'asc'\n    }) {\n        let stars = null\n        if (min && max) stars = ` stars:${min}..${max}`\n        else if (min) stars = ` stars:>=${min}`\n        else if (max) stars = ` stars:<=${max}`\n        if (sort === 'stargazers_count') sort = 'stars'\n\n        try {\n            return await octokit.request('GET /search/repositories', {\n                q: `org:${org} ${name}${stars ? stars : ''}`,\n                sort,\n                order,\n                page,\n                per_page: 10,\n            })\n        } catch (e) {\n            new RequestError(e)\n        }\n    },\n\n    async getIssues({ org, repo, state }) {\n        try {\n            return await octokit.request('GET /search/issues', {\n                q: `repo:${repo} state:${state}`,\n                per_page: 100,\n                page: 1,\n            })\n        } catch (e) {\n            new RequestError(e)\n        }\n    }\n}\n\nexport default githubAPI","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport github from '../services/github'\n\nexport const searchOrganizations = createAsyncThunk(\n  'organization/fetchList',\n  async (input) => {\n    const response = await github.searchOrganizations(input)\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n)\n\nconst searchRepositoriesAsync = createAsyncThunk(\n  'repostory/fetchList',\n  async (params) => {\n    const response = await github.searchRepositories(params)\n    return response.data;\n  }\n)\n\nexport const getIssues = createAsyncThunk(\n  'repostory/fetchIssueList',\n  async (repositories) => {\n\n    const promiseList = []\n\n    repositories.forEach(repo => {\n      ['open', 'closed'].forEach(state => {\n        promiseList.push(github.getIssues({ repo: repo.full_name, state }))\n      })\n    })\n\n    const response = await Promise.all(promiseList)\n    // The value we return becomes the `fulfilled` action payload\n    return repositories.map((repository, index) => {\n      return { repo: repository.name, open_issues: response[index * 2].data.total_count, closed_issues: response[index * 2 + 1].data.total_count }\n    })\n  }\n)\n\nexport const initialState = () => ({\n  list: [],\n  selected: '',\n  serviceStatus: 'idle',//'idle' | 'loading' | 'succeeded' | 'failed'\n  loadingStack: {},\n  repositories: [],\n  totalCount: 0\n})\n\nexport const organizationSlice = createSlice({\n  name: 'organization',\n  initialState: initialState(),\n  reducers: {\n    resetOrganization: state => {\n      state.selected = ''\n      state.serviceStatus = 'idle' //'idle' | 'loading' | 'succeeded' | 'failed'\n      state.repositories = []\n      state.totalCount = 0\n    },\n    selectOrganization: (state, action) => {\n      state.repositories = []\n      state.selected = action.payload\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      //searchOrganizations\n      .addCase(searchOrganizations.pending, (state) => {\n        state.loadingStack['searchOrganizations'] = true;\n      })\n      .addCase(searchOrganizations.fulfilled, (state, action) => {\n        state.serviceStatus = 'idle'\n        state.list = action.payload.items.map(item => ({ id: item.login, name: item.login }))\n        state.loadingStack['searchOrganizations'] = false;\n        // state.list = action.payload.items.map(item => ({ id: item.login, name: item.login.charAt(0).toUpperCase() + item.login.slice(1).toLocaleLowerCase() }))\n      })\n      .addCase(searchOrganizations.rejected, (state) => {\n        state.loadingStack['searchOrganizations'] = false;\n      })\n      //searchRepositoriesAsync\n      .addCase(searchRepositoriesAsync.pending, (state) => {\n        state.loadingStack['searchRepositories'] = true;\n        state.serviceStatus = 'loading'\n      })\n      .addCase(searchRepositoriesAsync.fulfilled, (state, action) => {\n        state.serviceStatus = 'idle'\n        state.loadingStack['searchRepositories'] = false;\n        state.repositories = action.payload.items;\n        state.totalCount = action.payload.total_count;\n      })\n      // .addCase(searchRepositoriesAsync.rejected, (state) => {\n      //   state.loadingStack['searchRepositories'] = false;\n      // })\n      //getIssues\n      .addCase(getIssues.pending, (state) => {\n        state.loadingStack['getIssues'] = true;\n        state.serviceStatus = 'loading'\n      })\n      .addCase(getIssues.fulfilled, (state, action) => {\n        state.serviceStatus = 'idle'\n        state.loadingStack['getIssues'] = false;\n      })\n      .addCase(searchRepositoriesAsync.rejected, (state) => {\n        state.loadingStack['getIssues'] = false;\n      })\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { resetOrganization, receiveOrganizations, selectOrganization } = organizationSlice.actions\n\n\nexport const searchRepositories = (params) => (dispatch, getState) => {\n  const org = selectedOrganization(getState())\n  if (org) {\n    dispatch(searchRepositoriesAsync({ org, ...params }))\n  }\n};\n\n// Selectors\nexport const selectedOrganization = (store) => store.organization?.selected;\nexport const organizationList = (store) => store.organization.list;\nexport const repositoryList = (store) => store.organization.repositories\nexport const serviceStatus = (store) => store.organization.serviceStatus\nexport const loadingStack = (store) => store.organization.loadingStack\nexport const totalCount = (store) => store.organization.totalCount\n\nexport default organizationSlice.reducer","import organizationReducer from './organizationSlice'\nimport { configureStore } from '@reduxjs/toolkit'\n\n// import { isRejectedWithValue } from '@reduxjs/toolkit'\n/**\n * Log a warning and show a toast!\n */\n// export const rtkQueryErrorLogger = (store) => (next) => (action) => {\n//   // RTK Query uses `createAsyncThunk` from redux-toolkit under the hood, so we're able to utilize these use matchers!\n//   if (isRejectedWithValue(action)) {\n//     console.warn('We got a rejected action!')\n//   }\n\n//   return next(action)\n// }\n\nexport default configureStore({\n  reducer: {\n    organization: organizationReducer\n  },\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(rtkQueryErrorLogger),\n})","import ReactTooltip from \"react-tooltip\"\n\nconst TextField = ({\n    id = 'textField',\n    value = '',\n    label = '',\n    placeholder = '',\n    showTooltip = false,\n    loading = false,\n    onChange = () => { },\n    onKeyPress = () => { },\n    onClick = () => { },\n    className = '',\n}) => {\n    return (\n        <div>\n            {label && <p className={`mb-1 font-semibold ${className}`}>{label}</p>}\n            <input\n                id={id}\n                name={id}\n                autoComplete=\"off\"\n                value={value}\n                onChange={(e) => onChange(e.target.value)}\n                type={\"text\"}\n                className={`border border-solid border-2 border-primary p-2.5 text-md w-80 tablet:w-50 h-10 ${className}`}\n                placeholder={placeholder}\n                data-tip data-for={`${id}Tip`}\n                onKeyDown={onKeyPress}\n                onKeyPress={onKeyPress}\n                onClick={onClick}\n                data-test=\"textfield-input\"\n            >\n            </input>\n            {\n                showTooltip &&\n                <ReactTooltip\n                    id={`${id}Tip`}\n                    place=\"bottom\"\n                    effect=\"solid\"\n                    backgroundColor=\"#555456\"\n                    arrowColor=\"transparent\"\n                    className=\"bg-gray border-2xl shadow-header\"\n                    data-test=\"textfield-tooltip\">\n                    The result you were looking for could not be found\n                </ReactTooltip>\n            }\n            {\n                loading &&\n                <div className=\"absolute w-auto inset-y-0 top-2\" style={{ right: '40px' }}>\n                    <div className=\"loader\" data-test=\"textfield-loader\" />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default TextField\n","\nimport React, { useState, useEffect } from 'react'\nimport ReactTooltip from \"react-tooltip\"\n\nconst Range = ({\n    id = 'range',\n    value = { min: 0, max: 0 },\n    label = '',\n    onChange = () => { },\n    className = ''\n}) => {\n\n    const [showTooltip, setShowTooltip] = useState(false)\n\n    const handleOnChange = (min, max) => {\n        if (min && max && Number(min) >= Number(max)) setShowTooltip(true)\n        else {\n            setShowTooltip(false)\n            onChange({ min, max })\n        }\n    }\n\n    useEffect(() => {\n        ReactTooltip.rebuild()\n    })\n\n    return (\n        <div className={className}>\n            {label ? <p className=\"mb-1 font-semibold\">{label}</p> : <></>}\n            <div\n                id={`${id}`}\n                data-tip data-for={`${id}Tip`}\n                data-test=\"range-component\"\n            >\n                <input\n                    id={`${id}Min`}\n                    autoComplete=\"off\"\n                    defaultValue={value.min}\n                    onChange={(e) => handleOnChange(e.target.value, value.max)}\n                    placeholder=\"Min\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"999999\"\n                    className={`border p-2.5 text-md w-20 h-10 mr-5 ${className} ${showTooltip ? 'border-danger active:border-danger' : 'border-primary '}`}\n                    data-test=\"min-input\"\n                >\n                </input>\n                <input\n                    id={`${id}Max`}\n                    autoComplete=\"off\"\n                    defaultValue={value.max}\n                    onChange={(e) => handleOnChange(value.min, e.target.value)}\n                    placeholder=\"Max\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"999999\"\n                    className={`border p-2.5 text-md w-20 h-10 ${className} ${showTooltip ? 'border-danger' : 'border-primary '}`}\n                    data-test=\"max-input\"\n                >\n                </input>\n            </div>\n\n            {showTooltip &&\n                <ReactTooltip\n                    id={`${id}Tip`}\n                    place=\"bottom\"\n                    effect=\"solid\"\n                    backgroundColor=\"#555456\"\n                    arrowColor=\"transparent\"\n                    className=\"bg-gray border-2xl shadow-header\"\n                    type=\"error\"\n                    data-test=\"range-tooltip\">\n                    Conflicting min and max values\n                </ReactTooltip>}\n        </div>\n    )\n}\n\nexport default Range\n","import { useState } from \"react\"\nimport TextField from './textField'\n\nconst AutoComplete = ({\n    id = 'autocomplete',\n    data = [],\n    placeholder = '',\n    value = '',\n    loading = false,\n    className = '',\n    onSelect = () => { },\n    onChange = () => { },\n}) => {\n    const [isComponentVisible, setIsComponentVisible] = useState(true)\n    const [cursor, setCursor] = useState(0)\n\n    const onKeyPress = (e) => {\n        if (e.charCode === 0 && e.keyCode === 13 && data.length > 0) {\n            selectItem()\n        } else if (e.keyCode === 38 && cursor > 0 && e.code === \"ArrowUp\") {\n            setCursor(cursor - 1)\n        } else if (e.keyCode === 40 && cursor < data.length - 1 && e.code === \"ArrowDown\") {\n            setCursor(cursor + 1)\n        }\n    }\n\n    const selectItem = (name) => {\n        onSelect(name ? name : data[cursor].name)\n        setIsComponentVisible(false)\n        setCursor(0)\n    }\n\n    return (\n        <div className=\"relative w-80\" data-test=\"autocomplete-component\">\n            <TextField\n                id={id}\n                value={value}\n                onChange={(val) => {\n                    onChange(val)\n                    setIsComponentVisible(true)\n                }}\n                onClick={() => setIsComponentVisible(!isComponentVisible)}\n                placeholder={placeholder}\n                onKeyPress={onKeyPress}\n                showTooltip={value && data.length === 0}\n                loading={loading}\n                className={`border ${className}`}\n                data-test=\"autocomplete-input\" />\n            {data.length > 0 && isComponentVisible && (\n                <ul\n                    className=\"bg-white p-0 list-none min-w-80 absolute top-auto left-0 m-o box-border max-h-56 z-10 overflow-y-auto w-80 mt-2\"\n                    data-test=\"autocomplete-list\">\n                    {data.map((item, i) => (\n                        <li key={item.id}\n                            className={`h-10 box-border hover:bg-blue-light flex px-2.5 decoration-auto ${cursor === i ? 'bg-blue-light' : ''}`}>\n                            <button\n                                data-test={`autocomplete-list-item-${i}`}\n                                className=\"bg-none border-none p-0 w-full text-left active:color-gray-dark active:outline-none\"\n                                key={item.id}\n                                onClick={() => selectItem(item.name)}\n                            >\n                                {item.name}\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    )\n}\n\nexport default AutoComplete","import ReactPaginate from 'react-paginate';\n\nconst Table = ({\n    list = [],\n    columns = {},\n    loading = false,\n    sort,\n    order,\n    handlePageClick,\n    pageCount,\n    sorting\n}) => {\n\n    return (\n        <div>\n            <table className=\"my-5 table-auto flex-col w-full\">\n                <thead className=\"border-b-2\">\n                    <tr>\n                        {\n                            Object.keys(columns).map((key, index) => {\n                                return <th scope=\"col\"\n                                    key={key}\n                                    className={`px-2.5 py-2 ${index === 0 ? 'text-left' : 'text-center'}`}\n                                    onClick={() => sorting(key)}>\n                                    <span className=\"font-semibold\">{columns[key]}</span>\n                                    {key === sort && <i className={`ml-2 sm arrow ${order === 'asc' ? 'up' : 'down'}`}></i>}\n                                </th>\n                            })\n                        }\n                    </tr>\n                </thead>\n                <tbody className=\"\">\n                    {\n                        list.length > 0 && list.map((item, x) => {\n                            return <tr key={`tr-${x}`} className=\"border border-solid border-primary\">\n                                {\n                                    Object.keys(columns).map((key, y) => {\n                                        return <td key={`td-${y}`} className={`px-2.5 py-2 whitespace-nowrap bg-white ${y === 0 ? 'text-left' : 'text-center'}`}>\n                                            <span className=\"\">{item[key]}</span>\n                                        </td>\n                                    })\n                                }\n                            </tr>\n                        })\n                    }\n                </tbody>\n            </table>\n            <div className=\"w-full h-10 flex justify-center\">\n                {\n                    loading ?\n\n                        <span className=\"loader\"></span> :\n                        list.length === 0 ?\n                            <span className=\"text-center\">No results</span> : <></>\n                }\n            </div>\n            {\n                pageCount > 0 && <ReactPaginate\n                    previousLabel={\"prev\"}\n                    nextLabel={\"next\"}\n                    breakLabel={\"...\"}\n                    breakClassName={\"break-me\"}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={5}\n                    pageCount={pageCount}\n                    onPageChange={(e) => { handlePageClick(e.selected) }}\n                    containerClassName={\"pagination\"}\n                    subContainerClassName={\"pages pagination\"}\n                    activeClassName={\"active\"} />\n            }\n\n        </div >\n    )\n}\n\nexport default Table","import React, { useState } from \"react\"\n\nconst DropDown = ({\n    value,\n    options = [],\n    onChange = () => { } }) => {\n\n    const [isOpen, setIsOpen] = useState(false)\n\n    const onToggle = () => setIsOpen(!isOpen)\n\n    const onOptionClicked = val => {\n        onChange(val)\n        setIsOpen(false)\n    };\n\n    return (\n        <>\n            <div className=\"relative w-10 mx-0 my-4\">\n                <button type=\"button\"\n                    className=\"button w-64 h-10 bg-white border border-primary flex justify-between items-center px-2.5\"\n                    onClick={() => onToggle()}\n                    data-test=\"dropdown-component\">\n                    {value ? <span>{value.name}</span> : <span>Select an option</span>}\n                    <i className={`arrow ${isOpen ? 'up' : 'down'}`}></i>\n                </button>\n                {isOpen && (\n                    <ul\n                        className=\"border border-primary bg-white p-0 list-none absolute top-auto left-0 m-o box-border max-h-56 z-10 overflow-y-auto w-64 mt-2\"\n                        data-test=\"dropdown-list\">\n                        {options.map((item, i) => (\n                            <li key={`li-${item.id}`}\n                                className=\"h-10 box-border hover:bg-blue-light flex px-2.5 decoration-auto\">\n                                <button\n                                    className=\"bg-none border-none p-0 w-full text-left active:color-gray-dark active:outline-none\"\n                                    key={`button-${item.id}`}\n                                    onClick={() => onOptionClicked(item)}\n                                    data-test={`dropdown-list-item-${i}`}\n                                >\n                                    <span>{item.name}</span>\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                )}\n            </div>\n        </>\n    )\n}\n\nexport default DropDown","import {\n    ScatterChart,\n    Scatter,\n    XAxis,\n    YAxis,\n    ZAxis,\n    CartesianGrid,\n    Tooltip,\n    Cell,\n    ResponsiveContainer\n} from 'recharts'\n\nconst Plot = ({ plotType, data, loading }) => {\n    return (\n        <>\n            {loading && <div className=\"absolute flex justify-center items-center z-10 w-full h-full\"><span className=\"loader\"></span></div>}\n            <ResponsiveContainer width={\"100%\"} height={\"100%\"}>\n                <ScatterChart\n                    margin={{\n                        top: 30,\n                        right: 40,\n                        bottom: 40,\n                        left: 30,\n                    }}\n                >\n                    <CartesianGrid />\n                    <XAxis type=\"number\" dataKey=\"closed_issues\" name=\"closed issues\" label={{ value: 'Closed issues', position: 'insideBottomLeft', offset: -15 }} />\n                    <YAxis type=\"number\" dataKey=\"open_issues\" name=\"open issues\" label={{ value: 'Open issues', angle: -90, position: 'insideBottomLeft' }} />\n                    <ZAxis type=\"string\" dataKey=\"repository\" name=\"repo\" />\n                    <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                    <Scatter data={data} fill=\"#8884d8\">\n                        {data.map((item, index) => (\n                            <Cell key={`cell-${index}`} fill={item.color} />\n                        ))}\n                    </Scatter>\n                </ScatterChart>\n            </ResponsiveContainer>\n        </>\n    )\n}\n\nexport default Plot","import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { AutoComplete } from \"../common\"\nimport { organizationList, selectOrganization, searchOrganizations, loadingStack, resetOrganization } from \"../../store/organizationSlice\"\n\nlet timeout = null\n\nconst Header = () => {\n    const dispatch = useDispatch()\n    const [searchText, setSeacrhText] = useState('octokit')\n    const organizations = useSelector(organizationList)\n    const loading = useSelector(loadingStack)\n\n    useEffect(() => {\n        if (searchText) {\n            clearTimeout(timeout)\n            timeout = setTimeout(() => {\n                dispatch(searchOrganizations(searchText))\n            }, 500)\n\n        }\n    }, [searchText, dispatch])\n\n    const onSelectItem = (val) => {\n        setSeacrhText(val)\n        dispatch(resetOrganization())\n        setTimeout(() => {\n            dispatch(selectOrganization(val))\n        }, 0)\n    }\n\n    return (\n        <header className=\"bg-gray-dark p-2.5 shadow-header absolute w-full sticky top-0\" >\n            <AutoComplete\n                id=\"search-organization\"\n                data={organizations}\n                iconColor=\"Turquoise\"\n                className=\"h-10 w-80 p-2.5\"\n                placeholder=\"Search organizations\"\n                value={searchText}\n                onChange={(val) => setSeacrhText(val)}\n                onSelect={(val) => onSelectItem(val)}\n                loading={loading['searchOrganizations']}\n            />\n        </header>\n    )\n}\n\nexport default Header\n","\nimport { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TextField, Range, Table } from '../common'\nimport { loadingStack, repositoryList, searchRepositories, totalCount } from '../../store/organizationSlice'\n\nconst columns = {\n    name: \"Repository\",\n    open_issues_count: \"Open issues\",\n    stargazers_count: \"Stars\",\n}\n\nlet timeout = null\n\nconst List = () => {\n\n    const dispatch = useDispatch()\n    const loading = useSelector(loadingStack)\n    const repositories = useSelector(repositoryList)\n    const count = useSelector(totalCount)\n    const [name, setName] = useState('')\n    const [range, setRange] = useState({ min: 0, max: 0 })\n    const [page, setPage] = useState(1)\n    const [pageCount, setPageCount] = useState(0)\n    const [sort, setSort] = useState('')\n    const [order, setOrder] = useState('asc')\n\n    const sorting = (key) => {\n        if (key === sort) setOrder(order === 'asc' ? 'desc' : 'asc')\n        else {\n            setSort(key)\n            setOrder('asc')\n        }\n    }\n\n    useEffect(() => {\n        if ((name || range.max || range.min || sort) && order) {\n            clearTimeout(timeout)\n            timeout = setTimeout(() => {\n                dispatch(searchRepositories({ name, ...range, page, sort, order }))\n            }, 500)\n\n        }\n    }, [name, range, page, sort, order, dispatch])\n\n    useEffect(() => {\n        setPageCount(Math.ceil(count / 10))\n    }, [count])\n\n\n    return (\n        <>\n            <div className=\"flex flex-wrap\">\n                <TextField\n                    id=\"autoComplete\"\n                    value={name}\n                    onChange={(val) => { setName(val) }}\n                    className=\"w-80 mr-10\"\n                    placeholder=\"Type to filter\"\n                    label=\"Filter repositories by name\"\n                />\n                <Range\n                    id=\"range\"\n                    value={range}\n                    onChange={(val) => { setRange(val) }}\n                    label=\"Filter by number of stars\"\n                />\n            </div>\n            <Table\n                list={repositories}\n                columns={columns}\n                loading={loading['searchRepositories']}\n                totalRecords={repositories.length}\n                pageCount={pageCount}\n                handlePageClick={(selected) => setPage(selected + 1)}\n                sort={sort}\n                order={order}\n                sorting={sorting}\n            />\n        </>\n    )\n}\n\nexport default List\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DropDown, Plot } from '../common'\nimport github from '../../services/github'\nimport { repositoryList } from '../../store/organizationSlice'\n\n\nconst plotOptions = [\n    {\n        id: 'select',\n        name: 'Please choose'\n    }, \n    {\n        id: 'scatterDot',\n        name: 'Scatter dot plot'\n    }, {\n        id: 'timeline',\n        name: 'Timeline plot'\n    }, {\n        id: 'visualize',\n        name: 'Visualize plot'\n    }]\n\n\nconst Plots = () => {\n\n    const dispatch = useDispatch()\n    const [plotType, setPlotType] = useState(plotOptions[0])\n    const repositories = useSelector(repositoryList)\n    const [plotList, setPlotList] = useState([])\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        async function fetchIssues() {\n            if (repositories.length > 0 && plotType.id === 'scatterDot') {\n                try {\n                    setLoading(true)\n                    const promiseList = []\n                    repositories.forEach(repo => {\n                        ['open', 'closed'].forEach(state => {\n                            promiseList.push(github.getIssues({ repo: repo.full_name, state }))\n                        })\n                    })\n\n                    let response = await Promise.all(promiseList)\n                    const plots = repositories.map((repository, index) => {\n                        const open_issues = response[index * 2].data.total_count\n                        const closed_issues = response[index * 2 + 1].data.total_count\n                        const percentage = (open_issues * 100) / (open_issues + closed_issues)\n                        let color = null\n\n                        if (open_issues < 100) color = '#111111'\n                        else if (percentage < 10) color = '#00CC2D'\n                        else if (percentage < 25) color = '#FFD600'\n                        else color = '#FF0000'\n\n                        return { repository: repository.name, open_issues: open_issues.toString(), closed_issues: closed_issues.toString(), color }\n                    })\n                    setPlotList(plots)\n                    setLoading(false)\n                } catch (e) {\n                }\n            }\n        }\n\n        fetchIssues()\n    }, [repositories, plotType, dispatch])\n\n    return (\n        <>\n            <div>\n                <DropDown\n                    value={plotType}\n                    options={plotOptions}\n                    onChange={(val) => setPlotType(val)}\n                />\n            </div>\n            <div className=\"h-80 relative\">\n                {\n                    plotType.id === 'scatterDot' ?\n                        <Plot\n                            plotType={plotType}\n                            data={plotList}\n                            loading={loading} /> :\n                        <></>\n                }\n            </div>\n        </>\n\n    )\n}\nexport default Plots","import { useSelector } from 'react-redux'\nimport { selectedOrganization } from '../../store/organizationSlice'\nimport List from '../repository/list'\nimport Plots from '../repository/plots'\n\nconst Container = () => {\n    const organization = useSelector(selectedOrganization)\n\n    return (\n        <div className=\"bg-gray h-full p-10\"\n            data-test=\"container-component\" >\n            {\n                organization ?\n                    <>\n                        <h3 className=\"mb-5 font-semibold\">{organization}</h3>\n\n                        <div className=\"grid grid-cols-1 laptop:grid-cols-2 gap-4\">\n                            <div className=\"row-span-1 laptop:pr-5\">\n                                <List data-test=\"list-component\" />\n                            </div>\n                            <div className=\"row-span-1 laptop:pr-5\">\n                                <Plots data-test=\"plots-component\" />\n                            </div>\n                        </div>\n                    </>\n                    :\n                    <div className=\"flex justify-center items-center h-full\">\n                        <h3 className=\"text-gray-light\">Search for an organization</h3>\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default Container\n","import React from 'react'\nimport Header from '../components/layout/header'\nimport Container from '../components/layout/container'\n\nfunction App() {\n  return (\n    <div className=\"h-screen\" data-test=\"app-container\">\n      <Header data-test=\"header-component\"/>\n      <Container data-test=\"container-component\"/>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nimport \"@fontsource/roboto\"\nimport './index.css'\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}